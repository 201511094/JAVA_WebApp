[Chapter01] 데이터베이스 시스템

#01 데이터베이스와 데이터베이스 시스템
* 데이터, 정보, 지식
 - 데이터: 관찰의 결과로 나타난 정량적인 실제 값
 - 정보: 데이터에 의미를 부여한 것
 - 지식: 사물이나 현상에 대한 이해

* 데이터베이스란 조직에 필요한 정보를 얻기 위해 논리적으로 연관된 데이터를 모아 구조적으로 통합해 놓은 것이다.
* 데이터베이스 시스템은 데이터의 검색과 변경 작업을 주로 수행한다.
 - 변경: 시간에 따라 변하는 데이터 값을 데이터베이스에 반영하기 위해 수행하는 삽입/삭제/수정 등의 과정

* 데이터베이스의 개념
 - 통합된integrated 데이터: 데이터를 통합, 데이터 중복을 최소화하여 데이터 불일치 현상을 제거
 - 저장된stored 데이터: 문서가 아닌 컴퓨터 저장장치에 저장된 데이터
 - 운영operational 데이터: 조직의 목적, 즉 업무를 위한 검색을 할 목적으로 저장된 데이터
 - 공용shared 데이터: 공동으로 사용되는 데이터

* 데이터베이스의 특징
 - 실시간 접근성(real time accessibility): 실시간으로 서비스되며 데이터 요청시 수 초 내에 결과를 서비스
 - 계속적인 변화(continuous change): 데이터베이스에 저장된 내용은 어느 한 순간의 상태를 나타내지만 데이터 값은 시간에 따라 항상 바뀜.
 - 동시 공유(concurrent sharing): 서로 다른 업무 또는 여러 사용자에게 동시에 공유됨, concurrent는 병행
 - 내용에 따른 참조(reference by content): 데이터베이스에 저장된 데이터는 데이터의 물리적인 위치가 아니라 데이터 값에 따라 참조됨

* 데이터베이스 시스템의 구성
 - DBMS: 사용자와 데이터베이스를 연결해주는 소프트웨어
 - 데이터베이스: 데이터를 모아둔 토대
 - 데이터 모델: 데이터가 저장되는 기법에 관한 내용

#02 데이터베이스 시스템의 발전
* 파일 시스템
 - 데이터를 파일 단위로 파일 서버에 저장
 - 각 컴퓨터가 LAN을 통해 파일 서버에 연결되어 있고 데이터를 사용하기 위해 각 컴퓨터의 응용 프로그램에서 open/close를 요청
 - 각 응용 프로그램이 독립적으로 파일을 다루기 때문에 데이터가 중복 저장될 가능성이 있음
 - 동시에 파일을 다루기 때문에 데이터의 일관성이 훼손될 수 있음

* 데이터베이스 시스템
 - DBMS를 도입, 데이터를 통합 관리하는 시스템
 - 데이터를 가진 쪽이 서버, 데이터를 요청하는 쪽이 클라이언트
 - DBMS서버가 파일을 다루며 데이터의 일관성 유지, 복구, 동시 접근 제어 등의 기능을 수행
 - 데이터의 중복을 줄이고 데이터를 표준화하며 무결성을 유지

* 웹 데이터베이스 시스템
 - 데이터베이스를 웹 브라우저에서 사용할 수 있도록 서비스하는 시스템
 - 온라인 상거래, 공공 민원 서비스

* 분산 데이터베이스 시스템
 - 여러 곳에 분산된 DBMS서버를 연결하여 운영하는 시스템
 - 대규모의 응용 시스템에 사용됨

#03 파일 시스템과 DBMS
 필드->레코드->파일
* 파일 시스템과 DBMS 비교
			파일 시스템			DBMS
 데이터 정의/저장	응용프로그램/파일시스템		DBMS/데이터베이스
 데이터 접근 방법	응용프로그램이 직접 접근	응용프로그램이 DBMS에 파일 접근을 요청
 사용 언어		자바,C++,C			자바,C++,C와 SQL
 CPU/주기억장치 사용	적음				많음

* DBMS의 장점
 - 데이터 중복 가능성 낮음, 데이터의 일관성이 유지됨
 - 데이터 정의와 프로그램의 독립성 유지 가능
 - 관리 기능으로 데이터 복구, 보안, 동시성 제어, 데이터 관리 기능 등을 수행
 - 프로그램 개발 생산성 좋음 (짧은 시간에 큰 프로그램 개발 가능)
 - 데이터 무결성 유지, 데이터 표준 준수 용이

#04 데이터베이스 시스템의 구성
* 데이터베이스 언어 SQL
 - DDL(Data Definition Language): 데이터 정의어
 - DML(Data Manipulation Language): 데이터 조작어
 - DCL(Data Control Language): 데이터 제어어

* 데이터베이스 사용자
 - 일반사용자
 - 응용프로그래머: 일반사용자가 사용할 수 있도록 프로그램을 만드는 사람
 - SQL 사용자
 - 데이터베이스 관리자(DBA, Database Administrator): 데이터베이스 시스템을 총괄하는 사람, 데이터 설계/구현/유지보수의 전 과정을 담당

* DBMS의 기능
 - 데이터 정의(Definition): 데이터의 구조를 정의, 데이터 구조에 대한 삭제/변경 기능을 수행
 - 데이터 조작(Manipulation): 데이터를 조작하는 응용 프로그램이 요청하는 데이터 삽입/수정/삭제 작업을 지원
 - 데이터 추출(Retrieval): 사용자가 조회하는 데이터나 응용 프로그램의 데이터를 추출, SELECT문
 - 데이터 제어(Control): 데이터베이스 사용자를 생성하고 모니터링하며 접근을 제어, 백업과 회복, 동시성 제어 등을 지원

* 데이터 모델
 - 계층 데이터 모델: 포인터 사용
 - 네트워크 데이터 모델: 포인터 사용
 - 객체 데이터 모델: 객체식별자 사용
 - 관계 데이터 모델: 가장 많이 쓰임, 속성값 사용
 - 객체-관계 데이터 모델: 관계 데이터 모델과 객체 데이터 모델의 장점을 결합한 모델

* 3단계 데이터베이스 구조
 데이터베이스(물리적인 데이터 구조) <--> 내부 스키마(DBMS가 보는 데이터) <-개념/내부 매핑-> 개념 스키마(전체 데이터) <-외부/개념 매핑-> 외부 스키마(사용자가 보는 데이터)
 - 외부external 스키마: 서브 스키마, 전체 데이터베이스 중에서 하나의 논리적인 부분을 의미, 여러 개 존재 가능, 뷰의 개념과 같음
 - 개념conceptual 스키마: 전체 데이터베이스의 정의, 통합 조직별로 하나만 존재, DBA가 관리, 하나의 데이터베이스에는 하나의 개념 스키마
 - 내부internal 스키마: 물리적 저장장치에 데이터베이스가 실제로 저장되는 방법의 표현, 하나만 존재
 - 외부/개념 매핑: 사용자의 외부 스키마와 개념 스키마간의 매핑(사상), 외부 스키마의 데이터가 개념 스키마의 어느 부분에 해당되는지 대응시킴
 - 개념/내부 매핑: 개념 스키마의 데이터가 내부 스키마의 물리적 장치 어디에 어떤 방법으로 저장되는지 대응시킴

* 데이터 독립성
 - 논리적 데이터 독립성: 외부 스키마와 개념 스키마 사이의 독립성, 개념 스키마의 변경이 외부 스키마에 영향을 미치지 않도록
 - 물리적 데이터 독립성: 개념 스키마와 내부 스키마 사이의 독립성, 내부 스키마의 변경이 개념 스키마에 영향을 미치지 않도록, 논리적 독립성보다 구현이 쉬움


[Chapter02] 관계 데이터 모델

#01 관계 데이터 모델의 개념
* 릴레이션은 행과 열로 구성된 테이블이다.
 - relation: 릴레이션, 테이블
 - relational data model: 관계 데이터 모델
 - relational database: 관계 데이터베이스
 - relational algebra: 관계대수
 - relationship: 관계, 테이블 내에서 생성되는 관계는 릴레이션 내 데이터들의 관계, 테이블 간에 생성되는 관계는 릴레이션 간의 관계

 튜플=행, 속성=열=차수(degree)

* 릴레이션 스키마의 요소
 - 속성(attribute): 릴레이션 스키마의 열
 - 도메인(domain): 속성이 가질 수 있는 값의 집합
 - 차수(degree): 속성의 개수
 - 스키마의 표현: 릴레이션 이름(속성1: 도메인1, ...)

* 릴레이션 인스턴스 요소
 - 튜플(tuple): 릴레이션의 행, 튜플이 가지는 속성의 개수는 릴레이션 스키마의 차수와 동일, 릴레이션 내의 모든 튜플들은 서로 중복되면 안됨
 - 카디날리티(cardinality): 튜플의 수

 릴레이션=테이블=파일
 스키마=내포(intension)=헤더
 인스턴스=외연(extension)=데이터
 튜플=행=레코드
 속성=열=필드

* 릴레이션 특징
 - 속성은 단일값을 가짐
 - 속성은 서로 다른 이름을 가짐
 - 한 속성의 값은 모두 같은 도메인 값을 가짐
 - 속성의 순서는 상관없음
 - 릴레이션 내의 중복된 튜플은 허용하지 않음
 - 튜플의 순서는 상관없음

* 관계 데이터 모델
 - 데이터를 2차원 테이블 형태인 릴레이션으로 표현함
 - 릴레이션에 대한 제약조건과 관계 연산을 위한 관계대수를 정의함
 관계 데이터 모델 --> 컴퓨터 시스템에 구현 --> 관계 데이터베이스 시스템

#02 무결성 제약조건
* 키
 - 특정 튜플을 식별할 때 사용하는 속성 혹은 속성의 집합
 - 키가 되는 속성(속성의 집합)은 반드시 값이 달라서 튜플들을 서로 구별할 수 있어야 함
 - 릴레이션 간의 관계를 맺는 데도 사용됨
 - 슈퍼키: 튜플을 유일하게 식별할 수 있는 하나의 속성 혹은 속성의 집합, 모든 속성의 집합이 슈퍼키가 될 수 있음
 - 후보키: 튜플을 유일하게 식별할 수 있는 속성의 최소 집합, 2개 이상의 속성으로 이루어진 키는 복합키
 - 기본키: 여러 후보키 중 선정된 키, 후보키가 여러 개면 릴레이션의 특성을 반영하여 하나를 선택, 릴레이션 스키마 표현 시 기본키는 밑줄을 그어 표시
	<제약조건>
	릴레이션 내 튜플을 식별할 수 있는 고유한 값을 가져야 함
	NULL값 허용하지 않음
	키 값의 변동이 일어나지 않아야 함
	최대한 적은 수의 속성을 가져야 함
	향후 키를 사용하는 데 있어서 문제 발생 소지가 없어야 함

 - 대리키: 기본키를 선정하기 어려운 경우 가상의 속성을 만들어 삼은 키, DBMS나 관련 SW에서 임의로 생성하는 값, 사용자가 직관적으로 그 값의 의미를 알 수 없음
 - 대체키: 기본키로 선정되지 않은 후보키
 - 외래키: 다른 릴레이션의 기본키를 참조하는 속성, 다른 릴레이션의 기본키를 참조하여 관계 데이터 모델의 특징인 릴레이션의 관계를 표현함
	<특징>
	관계 데이터 모델의 릴레이션 간의 관계를 표현함
	다른 릴레이션의 기본키를 참조하는 속성
	참조하고(외래키) 참조되는(기본키) 양쪽 릴레이션의 도메인은 서로 같아야 함
	참조되는(기본키) 값이 변경되면 참조하는(외래키) 값도 변경됨
	NULL값과 중복 값 등이 허용됨
	자기 자신의 기본키를 참조하는 외래키도 가능함
	외래키가 기본키의 일부가 될 수 있음

* 데이터 무결성 데이터베이스에 저장된 데이터의 일관성과 정확성을 지키는 것이다.
* 무결성 제약조건
 - 도메인 무결성 제약조건: 도메인 제약, 릴레이션 내의 튜플들이 각 속성의 도메인에 지정된 값만을 가져야 한다는 조건
 - 개체 무결성 제약조건: 기본키 제약, 릴레이션은 기본키를 지정하고 그에 따른 무결성 원칙(not Null, 유일성)을 지켜야 한다는 조건
 - 참조 무결성 제약조건: 외래키 제약, 자식 릴레이션이 외래키는 부모 릴레이션의 기본키와 도메인이 동일해야 하며 자식 릴레이션 값이 변경될 때 부모 릴레이션의 제약을 받는것
* 제약조건 정리
				도메인				키
				도메인 무결성	개체 무결성		참조 무결성
 제약 대상			속성		튜플			속성과 튜플
 같은 용어			도메인 제약	기본키 제약		외래키 제약
 해당되는 키					기본키			외래키
 NULL값 허용여부		O		X			O
 릴레이션 내 제약조건 개수	속성의 개수	1개			0 ~ 여러 개
 기타				튜플 삽입/수정 시 제약사항 우선 확인	부모 릴레이션의 수정/삭제 시 제약사항 우선 확인

* 개체 무결성 제약조건
 - 기본키 값이 같으면 삽입 금지, 기본키 값이 같거나 NULL로도 수정이 금지됨, 삭제는 특별한 확인 필요 없음
* 참조 무결성 제약조건 옵션
 부모 릴레이션에서 튜플을 삭제할 경우,
 - RESTRICTED: 자식 릴레이션에서 참조하고 있을 경우 부모 릴레이션의 삭제 작업을 거부
 - CASCADE: 자식 릴레이션의 관련 튜플을 같이 삭제 처리
 - DEFAULT: 자식 릴레이션의 관련 튜플을 미리 설정해둔 값으로 변경 
 - NULL: 자식 릴레이션의 관련 튜플을 NULL값으로 설정(NULL값 허용인 경우)

#03 관계대수
* 관계대수란 릴레이션에서 원하는 결과를 얻기 위해 수학의 대수와 같은 연산을 이용하여 질의하는 방법을 기술하는 언어이다.
 - 관계대수는 어떤 데이터를 어떻게 찾는지 처리 절차를 명시하는 절차적인 언어, DBMS 내부의 처리 언어로 사용됨
 - 관계해석은 어떤 데이터를 찾는지만 명시하는 선언적인 언어로 관계대수와 함께 관계 DBMS의 표준 언어인 SQL의 이론적인 기반을 제공함
 - 관계대수와 관계해석은 모두 관계 데이터 모델의 중요한 언어이며 실제 동일한 표현 능력을 가지고 있음

 - 릴레이션R은 카티전 프로덕트의 부분집합으로 정의
 - 원소 개수가 n인 집합 S의 부분집합의 개수는 2^n이므로 카티전 프로덕트 AxB의 부분집합 개수는 2^(|A|×|B|)
 - 카티전 프로덕트의 기초 집합 A, B 각각이 가질 수 있는 값의 범위를 도메인이라고 함
 - 릴레이션 역시 집합이며, 집합에서 가능한 연산은 합집합, 교집합, 카티전 프로덕트 등이 있음

* 관계대수는 릴레이션 간 연산을 통해 결과 릴레이션을 찾는 절차를 기술한 언어이며 이 연산을 수행하기 위한 식은 관계대수식이다.
 - 관계대수식은 대상이 되는 릴레이션과 연산자로 구성되며 결과는 릴레이션으로 반환됨
 - 반환된 릴레이션은 릴레이션의 모든 특징을 따름

 - 셀렉션(selection): 릴레이션의 튜플을 추출하기 위한 연산, 단항 연산자, σ<조건>(R)
 - 프로젝션(projection): 릴레이션의 속성을 추출하기 위한 연산, 단항 연산자, π<속성리스트>(R)
 - 합집합: 두 개의 릴레이션을 합해 하나의 릴레이션을 반환, 두 개의 릴레이션은 서로 같은 속성 순서와 도메인을 가져야 함, R∪S
 - 교집합: 합병가능한 두 릴레이션을 대상으로 두 릴레이션이 가지고 있는 튜플을 반환, R∩S
 - 차집합: 첫 번째 릴레이션에는 속하고 두 번째 릴레이션에는 속하지 않는 튜플을 반환
 - 카티전 프로덕트(cartesian product): 두 릴레이션을 연결시켜 하나로 합칠 때 사용, R×S
 - 조인: 두 릴레이션의 공통 속성을 기준으로 속성 값이 같은 튜플을 수평으로 결합하는 연산, 공통 속성의 속성 값이 동일한 튜플만을 반환, R조인c S=σc(R×S)
	기본연산(세타조인/동등조인/자연조인), 확장(세미조인/외부조인)
 - 디비전(division): 릴레이션 속성 값의 집합으로 연산을 수행, R÷S


[Chapter03] SQL 기초

#02 SQL 개요
* SQL Plus, SQL Developer

* SQL
 - 용도: 데이터베이스에서 데이터를 추출하여 문제 해결
 - 입출력: 둘 다 테이블
 - 번역: DBMS

* SQL 기능에 따른 분류
 - 데이터 정의어(DDL): 테이블이나 관계의 구조를 생성하는 데 사용, CREATE/ALTER/DROP
 - 데이터 조작어(DML): 테이블에서 데이터를 검색/삽입/수정/삭제하는 데 사용, SELECT/INSERT/UPDATE/DELETE
 - 데이터 제어어(DCL): 데이터의 사용 권한을 관리하는 데 사용, GRANT/REVOKE

#03 데이터 조작어
* SELECT문의 기본 문법
	SELECT[ALL | DISTINCT]	속성이름(들)
	FROM 			테이블이름(들)
	[WHERE			검색조건(들)]
	[GROUP BY		속성이름]
	[HAVING			검색조건(들)]
	[ORDER BY		속성이름[ASC|DESC]]

* 와일드 문자의 종류
 +	문자열을 연결
 %	0개 이상의 문자열과 일치
 []	1개의 문자와 일치
 [^]	1개의 문자와 불일치
 _	특정 위치의 1개의 문자와 일치

* 집계 함수의 종류
 SUM	SUM([ALL | DISTINCT] 속성이름)
 AVG	AVG([ALL | DISTINCT] 속성이름)
 COUNT	COUNT({[[ALL | DISTINCT] 속성이름] | *})
 MAX	MAX([ALL | DISTINCT] 속성이름)
 MIN	MIN([ALL | DISTINCT] 속성이름)

* GROUP BY, HAVING 문법과 주의사항
 - GROUP BY <속성>
	: GROUP BY로 튜플을 그룹으로 묶은 후 SELECT절에는 GROUP BY에서 사용한 <속성>과 집계함수만 나올 수 있음
 - HAVING <검색조건>
	: WHERE절과 HAVING절이 같이 포함된 SQL문은 검색조건이 모호해질 수 있음
	: HAVING절은 반드시 GROUP BY절과 같이 작성해야 하고, WHERE절보다 뒤에 나와야 하고, <검색조건>에는 집계함수가 와야 함

* 조인 문법
 일반적인 조인	SELECT <속성들> FROM 테이블1,테이블2 WHERE <조인조건> AND <검색조건>
		SELECT <속성들> FROM 테이블1 INNER JOIN 테이블2 ON <조인조건> WHERE <검색조건>
	: SQL문에서는 주로 동등조인을 사용하며 두 가지 문법 중 하나를 사용할 수 있음
 외부조인	SELECT <속성들> FROM 테이블1 {LEFT | RIGHT |FULL [OUTER]} JOIN 테이블2 ON <조인조건> WHERE <검색조건>
	: 외부조인은 FROM절에 조인 종류를 적고 ON을 이용하여 조인조건을 명시함

* 부속질의
 - SQL문 내에 또 다른 SQL문이 있는 경우
* 상관 부속질의(correlated subquery)는 상위 부속질의의 튜플을 이용하여 하위 부속질의를 계산한다.
 - 즉, 상위 부속질의와 하위 부속질의가 독립적이지 않고 서로 관련을 맺고 있음

* 집합연산
 - 합집합 UNION
 - 차집합 MINUS (Oracle에서는 MINUS이지만 SQL표준에서는 EXCEPT를 사용)
 - 교집합 INTERSECT

* EXISTS는 원래 단어에서 의미하는 것과 같이 조건에 맞는 튜플이 존재하면 결과에 포함시킨다.
 - 부속질의문에 어떤 행이 조건에 만족하면 참
* NOT EXISTS는 부속질의문의 모든 행이 조건에 만족하지 않을 때만 참이다.

#04 데이터 정의어
* CREATE문
 - 테이블을 구성하고 속성과 속성에 관한 제약을 정의하며 기본키 및 외래키를 정의하는 명령
 - PRIMARY KEY는 기본키 지정, FOREIGN KEY는 외래키 지정, ON UPDATE와 ON DELETE는 외래키 속성의 수정과 튜플 삭제 시 동작을 나타냄

 CREATE TABLE 테이블이름({속성이름 데이터타입 [NOT NULL | UNIQUE | DEFAULT 기본값 | CHECK 체크조건]}
     [PRIMARY KEY 속성이름(들)]
     {[FOREIGN KEY 속성이름 REFERENCES 테이블이름(속성이름)] [ON DELETE [CASCADE┃SET NULL]})

 - 두 개의 속성이 기본키가 되면 괄호를 사용하여 복합키를 지정함
 - 테이블의 CREATE문에 좀 더 복잡한 제약사항 추가 가능
 - 외래키 제약조건을 명시할 때는 반드시 참조되는 테이블(부모 릴레이션)이 존재해야 하며 참조되는 테이블의 기본키여야 함
 - 외래키 지정 시 ON DELETE 또는 ON UPDATE 옵션은 참조되는 테이블의 튜플이 삭제되거나 수정될 때 취할 수 있는 동작을 지정함
 - NO ACTION은 어떠한 동작도 취하지 않음
 - 속성의 데이터 타입 종류: NUMBER(p,s), CHAR(n), VARCHAR2(n), DATE

* ALTER문
 - 생성된 테이블의 속성과 속성에 관한 제약을 변경하며 기본키 및 외래키를 변경함
 - ADD, DROP은 속성을 추가하거나 제거할 때 사용함
 - MODIFY는 속성의 기본값을 설정하거나 삭제할 때 사용함
 - ADD <제약이름>, DROP <제약이름>은 제약사항을 추가하거나 삭제할 때 사용함

 ALTER TABLE 테이블이름
	[ADD 속성이름 데이터타입]
	[DROP COLUMN 속성이름]
	[MODIFY 속성이름 데이터타입]
	[MODIFY 속성이름 [NULL┃NOT NULL]]
	[ADD PRIMARY KEY(속성이름)]
	[[ADD┃DROP] 제약이름]

* DROP문
 - 테이블을 삭제하는 명령
 - 테이블의 구조와 데이터를 모두 삭제하므로 사용에 주의해야 함 (데이터만 삭제하려면 DELETE문을 사용함)

#05 데이터 조작어 - 삽입/수정/삭제
* INSERT문
 - 테이블에 새로운 튜플을 삽입하는 명령
 INSERT INTO 테이블이름[(속성리스트)] VALUES (값리스트);
 - 대량 삽입(bulk insert)란 한꺼번에 여러 개의 튜플을 삽입하는 방법

* UPDATE문
 - 특정 속성 값을 수정하는 명령
 UPDATE 테이블이름 SET 속성이름1=값1[, 속성이름2=값2, ...] [WHERE <검색조건>];

* DELETE문
 - 테이블에 있는 기존 튜플을 삭제하는 명령
 DELETE FROM 테이블이름 [WHERE 검색조건];


[Chapter04] SQL 고급
#01 내장 함수
* SQL에서는 함수의 개념을 사용하는데 수학의 함수처럼 특정 값이나 열의 값을 입력받아 그 값을 계산하여 결과 값을 돌려준다.
* SQL의 함수는 DBMS가 제공하는 내장 함수와 사용자가 필요에 따라 직접 만드는 사용자 정의 함수로 나뉜다.
* SQL 내장 함수
 - 상수나 속성 이름을 입력 값으로 받아 단일 값을 결과로 반환함
 - 모든 내장 함수는 최초에 선언될 때 유효한 입력 값을 받아야 함
 - 단일행 함수(숫자,문자,날짜/시간,변환,인코딩/디코딩,NULL관련), 집계 함수, 분석 함수

* NULL값 처리


* ROWNUM


#02 부속질의


#03 뷰


#04 인덱스