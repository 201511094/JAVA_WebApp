-- SELECT
SELECT empno, ename, job, mgr, hiredate, sal, comm, deptno FROM emp;
SELECT * FROM emp;

-- DUAL : 함수 및 계산의 결과를 볼 때 사용할 수 있는 공용(public) 테이블
SELECT SYSDATE FROM dual;   -- 년/월/일 출력
SELECT 7+20 FROM dual;
SELECT ascii('A') FROM dual;

-- 알리아스 : 별칭
SELECT sal*12 ASal FROM emp;
SELECT sal*12 as ASal FROM emp;
SELECT sal*12 "Annual Salary" FROM emp;

-- 연결연산자
SELECT ename || ' has $' || sal FROM emp;

-- WHERE절(알리아스는 사용할 수 없음)
SELECT * FROM emp WHERE deptno=10;  -- 부서번호=10
SELECT * FROM emp WHERE ename='SMITH';
SELECT * FROM emp WHERE hiredate='81-12-03';

-- 비교연산자
SELECT * FROM emp WHERE sal>=1000 AND sal<=1500;

-- BETWEEN ... AND ... : 두 값 사이(지정한 값 포함)
SELECT * FROM emp WHERE sal BETWEEN 1000 AND 1500;
SELECT * FROM emp WHERE sal NOT BETWEEN 1000 AND 1500;  -- NOT은 BETWEEN 앞에 위치
SELECT * FROM emp WHERE ename BETWEEN 'KING' AND 'SMITH';

-- IN : 값 목록 중의 값과 일치
SELECT * FROM emp WHERE sal IN (1300, 2450, 3000);
SELECT * FROM emp WHERE sal NOT IN (1300, 2450, 3000);
SELECT * FROM emp WHERE ename IN ('ALLEN', 'FORD');

/*
    LIKE : LIKE연산자를 사용하여 패턴 일치
    % -> 0개 이상의 문자를 나타냄
    _ -> 한 문자를 나타냄
*/
SELECT * FROM emp WHERE ename LIKE '%S%';
SELECT * FROM emp WHERE ename NOT LIKE '%S%';
SELECT * FROM emp WHERE ename LIKE 'FOR_';  -- FOR 다음에 꼭 한 글자

/*
    NULL 조건 사용
    오라클에서 NULL이란 입력이 안 된 값.
*/
SELECT * FROM emp WHERE comm IS NULL;   -- equal 사용 불가, IS NULL은 NULL인 것만 읽어옴
SELECT * FROM emp WHERE comm IS NOT NULL;   -- NULL이 아닌 것만 읽어옴

-- 논리연산자(AND, OR , NOT)
SELECT empno, ename, job, sal FROM emp WHERE sal>=2000 AND job LIKE '%MAN%';
SELECT empno, ename, job, sal FROM emp WHERE sal>=2000 OR job LIKE '%MAN%';

-- ORDER BY절
SELECT * FROM emp WHERE deptno=10 ORDER BY sal; -- ASC가 DEFAULT
SELECT * FROM emp WHERE deptno=10 ORDER BY sal ASC; -- 오름차순
SELECT * FROM emp WHERE deptno=10 ORDER BY sal DESC; -- 내림차순
SELECT * FROM emp ORDER BY sal ASC, ename ASC;
-- 열 알리아스를 기준으로 정렬
SELECT empno, ename, sal*12 annual FROM emp ORDER BY annual;
-- 열의 숫자 위치를 사용하여 정렬
SELECT ename, job, deptno, hiredate FROM emp ORDER BY 3;    --3열은 deptno, 부서번호를 기준으로 정렬

-- 그룹 함수
-- 그룹 함수를 사용하면 단일행이 결과로 보여짐
SELECT MAX(sal), MIN(sal), ROUND(AVG(sal)), SUM(sal) FROM emp;  --ROUND함수는 소수점 반올림

/*
    GROUP BY
    SELECT절에 그룹 함수 적용 시 개별 컬럼을 지정할 수 없음
    개별 컬럼을 지정할 경우에는 반드시 GROUP BY절에 지정된 컬럼만 사용
*/
-- 오류 발생 -> error: 단일 그룹의 그룹 함수가 아닙니다.
--SELECT deptno, MAX(sal), MIN(sal), ROUND(AVG(sal)), SUM(sal) FROM emp;

SELECT deptno, MAX(sal), MIN(sal), ROUND(AVG(sal)), SUM(sal)
FROM emp
GROUP BY deptno;

-- WHERE절 - GROUP BY - ORDER BY 순서로 사용
SELECT deptno, SUM(sal)
FROM emp
WHERE deptno>10
GROUP BY deptno
ORDER BY deptno;

/*
    HAVING
    그룹 처리 결과를 제한하고자 할 때 HAVING절 이용
    WHERE절은 일반 컬럼을 조건 체크할 수 있으나
    그룹 함수에 의해 만들어진 데이터는 HAVING절을 이용해야 함
    알리아스는 사용 불가
*/
-- 오류 발생 -> error: 그룹 함수는 허가되지 않습니다.
SELECT deptno, AVG(sal)
FROM emp
WHERE AVG(sal)>=2000
GROUP BY deptno;

-- 정상 구문 : 그룹 함수로부터 만들어진 데이터에서는 HAVING절을 사용
SELECT deptno, AVG(sal)
FROM emp
GROUP BY deptno
HAVING AVG(sal)>=2000;

SELECT deptno, ROUND(AVG(sal)) FROM e.
mp
WHERE deptno>10
GROUP BY deptno
HAVING ROUND(AVG(sal))>=2000
ORDER BY deptno;


/*
    [실습]
    1. 월급이 2500이상 3500미만인 사원의 이름, 입사일, 월급을 구하시오.
    2. 부서번호(deptno) 30번에서 근무하며 월 2,000달러 이하를 받는 1981년 5월 1일 이전에 입사한 사원의 이름, 급여, 부서번호, 입사일을 출력하시오.
    3. emp테이블에서 업무(job)별 최고 월급을 구하고 업무, 최고 월급을 출력하시오.
    4. emp테이블에서 부서별로 지급되는 총월급에서 금액이 9,000이상인 부서번호, 총월급을 출력하시오.
*/
--1번
SELECT ename, hiredate, sal
FROM emp
WHERE sal>=2500 AND sal<3500;

--2번
SELECT ename, sal, deptno, hiredate
FROM emp
WHERE deptno=30 AND sal<=2000 AND hiredate<'81-05-01';

--3번
SELECT job, MAX(sal)
FROM emp
GROUP BY job;

--4번
SELECT deptno, SUM(sal)
FROM emp
GROUP BY deptno
HAVING SUM(sal)>=9000;