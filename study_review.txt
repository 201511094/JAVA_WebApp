#HTML5
ch01 semantic
	header - 머리말, 회사의 로고, 메뉴, 검색상자 등
	hgroup - 제목과 부제목 묶기
	nav - 메뉴, 페이지 연결 링크
	section - 페이지의 논리적 영역, 내용 부분
	article - 세부 내용
	footer - 꼬리말, 저작권이나 사이트 소유자의 정보
	header - 내용의 작은 제목
	aside - 인용구, 덧붙이고 싶은 생각, 관련된 링크
ch02 form
	fieldset
	legend - 제목
	label과 input 연결 - input id값을 label for에 지정
	input태그 type속성값 - text, range, number, date, email, url, search, submit
	input태그 속성 - required, autofocus, min/max, value
ch03 media
	video태그 속성 - src, width/height, autoplay, controls(제어판), poster
	audio태그 속성 - src, width/height, alt, controls, autoplay
ch04 file
	input type="file" accept="???/*"(특정파일만 선택 가능)
	this.files[0]로 File객체 획득
	FileReader()로 파일을 읽음
	객체.textContent로 읽어들인 내용을 출력
	readAsDataURL(file.files[0])로 이미지 파일 읽음
ch05 webstorage
 s01_localStorage, s02_localStorage.html(jQuery)
	로컬스토리지
	- 브라우저를 통해 사용자의 컴퓨터 데이터를 지속적으로 저장할 수 있는 공간
	- 브라우저가 제공, 로컬스토리지를 이용해 개인화 서비스 제공
	- 사이트 재방문시 저장된 모든 데이터 사용 가능
	localStorage.KEY = VALUE 또는 localStorage.setItem(KEY, VALUE)로 데이터 저장
	localStorage.KEY 또는 localStorage.getItem(KEY)로 데이터 읽어옴
 s03_sessionStorage.html
	세션스토리즈
	- 브라우저 열려있는 동안에만 모든 데이터를 기억하는 저장공간
	- 임시 데이터 처리
	sessionStorage.KEY = VALUE 또는 sessionStorage.setItem(KEY, VALUE)로 데이터 저장
	sessionStorage.KEY 또는 sessionStorage.getItem(KEY)로 데이터 읽어옴

====================
#JavaScript
ch01 basic
 s01_launch, s02_launch, s03_inline.html
	실행 위치 - head태그 내부 또는 body태그 내부
	실행 코드(.js)를 외부에 명시하고 src로 링크 걸기
	inline형태 - 태그에 자바스크립트 내장
 s04_write, s05_write2.html
	한줄 주석 - //
	여러줄 주석 - /**/
ch02 variable
	변수 선언 후 값을 할당하지 않고 출력하면 오류는 발생하지 않고 undefined 출력됨
	변수명이 겹쳐도 오류가 발생하지 않음
	 typeof 변수명 - 해당 변수에 저장된 데이터 타입을 알려주는 연산자
	형변환 - Number(변수)는 문자->숫자로 변환
ch03 operator
	산술연산자 - +, -, *, /, %
	증감연산자 - ++, --
	대입연산자 - +=, -=, *=, /=, %=
	비교연산자 - === !== (값과 자료형 비교)
	논리연산자 - !, &&, ||, 자바스크립트에서는 논리연산자로 숫자(0/1)를 사용할 수 있음
	삼항연산자
	- 조건식 ? (참일 때 대입되는 값) : (거짓일 때 대입되는 값),
	- 조건식 ? (참일 때 수행되는 문장) : (거짓일 때 수행되는 문장)
ch04 operation
	if
	switch - case 10: ... default: , Math.floor(score/10) -> 소수점 절삭
	for
	while
	do-while - 선 처리, 후 비교
	break - break label을 이용하여 빠져나가고 싶은 반복문을 설정, break 반복문이름;
	continue
ch05 function
	선언적 함수, 익명함수
	함수의 이름이 같을 경우 마지막 함수가 호출됨
	변수 선언은 중복될 수 있고 대입한 마지막 함수가 호출됨
	지역변수 - 함수 안에서 var 선언한 변수, 함수 끝나면 소멸, 함수 밖에서 호출 불가능
	전역변수 - 함수 밖에서 만들어진 모든 변수, 함수 안에서 var 없이 만들어진 변수, 함수 끝나도 메모리에 남아 있음
	자바스크립트는 함수 생성 시 지정한 매개변수보다 많거나 적은 매개변수 사용을 허용함
	- 매개변수 수를 적게 사용하면 미지정 매개변수에는 undefined가 입력됨
	가변인자 함수 - 매개변수를 선언된 형태와 다르게 사용해도 매개변수를 모두 활용하는 함수
	자바스크립트의 모든 함수는 내부에 변수 arguments를 갖고 있음, 이는 매개변수의 배열임
	return
	함수를 매개변수로 받는 함수 - 매개변수로 전달된 함수를 실행
	내부함수 - 함수 내부에 있는 함수
ch06 nestedFunction
	isFinite() - 0으로 나누었는지 아닌지 검증 가능, 결과값이 true면 유한이고 false면 무한
	isNaN() - Not a Number, 전달되는 인자의 값이 숫자인지 아닌지 판별, true면 숫자가 아니고 false면 숫자 아님
	parseInt(), parseFloat() - 숫자를 추출해서 형변환
	encoding관련
	- escape(url), encodeURI(url), encodeURIComponent(url)
	- unescape(url), decodeURI(url), decodeURIComponent(url)
	eval() - 문자열을 전달하면 시행할 수 있는 코드로 변환
ch07 array
	for in 반복문 - for (var 변수 in array) {...}
	array.length, array.splice(인덱스, 인덱스)
	array.sort(), array.reverse()
	array.join(), array.join("") - 구분자를 사용한 문자열 반환
	array.slice(), array.slice( , )
	array.concat(n) - 전달되는 인자 또는 배열을 추가하여 새로운 배열 생성
	array.push(n) - 데이터 삽입
	array.pop() - 데이터 제거
ch08 object
	var object = { 속성 : 값 }
	this는 객체 내부에서 객체를 참조할 때 사용
	속성명 in object - in 키워드를 통해 객체 내의 속성 존재 여부 체크
	객체를 생성하면 자동으로 Object를 상속받으며 toString() 사용 가능
	delete(object.속성명) - 속성 제거
	생성자 함수
	프로토타입
	- 생성자 함수를 사용해 생성된 객체가 공통으로 가지는 공간
	- 생성자함수명.prototype.함수이름 = function() {...}
	- 자바스크립트는 프로토타입을 이용해 상속을 구현, Student.prototype = Human.prototype
ch09 clientObject
 s01_window, s02_window2, s03_window3.html
	브라우저 관련 객체 - window
	window.alert(), window.prompt(), window.confirm()
	window.open(url, 새창이름, 옵션)
	window.setTimeout(함수, 시간) - 일정시간 후에 함수를 한 번 실행
	window.setInterval(함수, 시간) - 일정시간 마다 함수를 반복해서 실행
 s04_location, s05_location2.html
	location객체
	- href(이동), host, hostname, protocol, port
	- assign(이동), replace(이동, 전페이지로 이동 불가), reload(새로고침)
 s06_history.html
	history객체
	- back(), go(-1)
	- forward(), go(1)
ch10 nestedObject
	Array
	Date
	- toLocaleString(), toLocaleDateString(), toLocaleTimeString()
	- getFullYear(), getMonth(), getDate(), getDay()
	- getHours(), getMinutes(), getSeconds(), getMilliseconds()
	Math - ceil(), floor(), round(), max(), min(), abs(), random()
	String
	- typeof(), toUpperCase()
	- charAt(), indexOf(), lastIndexOf(), substring(), split()
ch11 DOM
	문서 객체 탐색
	- 태그명 : document.getElementsByTagName('tagname'), 복수의 태그가 존재가능하므로 배열로 반환
	- id : getElementById('id')
	- name속성 : getElementsByName('name'), 배열로 반환
	- class : getElementsByClassName('class'), 배열로 반환
	태그 생성
	- createElement(tagname), createTextNode(text), appendChild(node)
	- 태그를 생성(createElement)한 후 노드 연결(appendChild) 필수
	innerHTML속성에 문자열 할당 - document.태그명.innerHTML = 문자열;
	문서 객체의 스타일 조작 - 문서객체.style.속성 = '속성값';
ch12 event
	인라인 이벤트 처리 - 함수 사용 가능
	onclick - 클릭 시 이벤트 발생
	onmouseover, onmouseout - 마우스 위치
	onchange - 범위를 벗어날 경우 이벤트 발생
	onsubmit - 전송 시 이벤트 발생
	window.onload - 문서가 준비된 이후에 실행
	이벤트 연결 - 변수.onclick = 함수이름;
	이벤트 제거 - 변수.onclick = null;
	key 이벤트 - keydown, keypress, keyup
	이벤트 전달
	- 이벤트 버블링 : 자식 노드->부모 노드 순으로 이벤트 실행
	- 이벤트 캡처링 : 부모 노드->자식 노드 순으로 이벤트 실행
	- event.stopPropagation() : 이벤트 전달 막기
	표준 이벤트 모델
	- 이벤트 연결 : addEventListener(이벤트타입, 이벤트핸들러, useCapture) 
	- 이벤트 제거 : removeEventListener(이벤트타입, 이벤트핸들러)

====================
#jQuery
ch01 selector
 s01_ready, s02_ready2.html
	jQuery 연결 방법
	- js파일 다운로드 연결
	- CDN방식 : URL을 통해 js 파일 연결
 s03_selector.html ~ s06_selector4.html
	태그 선택자 - ex) $('span')
	클래스 선택자 - ex) $('.class')
	id 선택자 - 유일 ex) $('#id')
	여러 개의 태그를 선택할 시 쉼표 사용 - ex) $('h1, p')
	두 개의 클래스를 모두 가진 태그 선택할 시 점 사용 - ex) $('h1.item.select')
	자식 선택자 - 직계 자식
	후손 선택자 - 직계+후손 모두 선택
ch02 method
	each - .each(배열, 배열로부터 데이터를 받아 처리하는 함수)
	addClass - 클래스 추가
	removeClass - 문서 객체의 클래스 속성을 제거
	attr - 속성과 관련된 모든 기능을 수행, 복수의 속성 제어 가능, 속성값을 반환
	removeAttr - 속성 제거
	prop - 선택한 요소에 속성을 반환, 생성, 변환
ch03 event
	jQuery에서는 자바스크립트에서 속성을 사용하는 것과 달리 메소드를 사용
	val() : value속성의 값을 읽어오는 메소드
	click, mouseover, mouseout, hover
	keyup
	on
	- .on(이벤트 종류, 이벤트 핸들러(=이벤트 발생 시 동작하는 함수))
	- .on(이벤트 종류, 이벤트 소스(=이벤트가 발생하는 태그), 이벤트 핸들러)
	- 현재 존재하는 태그뿐만 아니라 미래에 만들어질 태그에도 이벤트 연결이 가능

====================
#Servlet
 ch01, ch02
	Servlet은 HttpServlet을 상속해야 사용 가능 - extends HttpServlet
	클라이언트가 요청하면 Servlet객체가 생성되고 doGet() 또는 doPost()메소드가 호출됨
	web.xml에 주소를 매핑해야 주소창에 구조가 공개되지 않음
	Get방식 : 요청라인에 데이터를 넣어서 보냄 / Post방식 : body에 데이터를 넣어서 보냄
	1) 문서 타입 및 캐릭터셋 지정 - response.setContentType("text/html; charset=utf-8");
	2) 전송된 데이터 인코딩 처리 - request.setCharacterEncoding("utf-8");
	3) 전송된 데이터 반환 - request.getPArameter("name값");
	4) 출력 스트림 생성 - PrintWriter out = response.getWriter(); out.println(...);
	5) 출력 스트림 자원 정리 - out.close();

====================
#JSP
 ch01 launch
	jsp에서는 java만 사용 가능
	<%@ page 디렉티브 %> - jsp설정, jsp페이지에서 사용할 자바 클래스를 import해서 사용
	<% 자바 영역 %>
	<%= 표현식 %>
 ch02 script
	<%! 선언부 %> - 변수 선언, 메소드 선언 -> 멤버
	<% 스크립트릿 %> - 변수 선언, 연산, 제어문, 출력 -> 지역, 스크립트릿 안에 표현식 사용 불가능
	<%= 표현식 %> - 변수의 값 출력, 메소드 결과값 출력, 연산의 결과 출력
 ch03 nestedObject
	s01_makeTestForm, s02_viewParameter.jsp - 폼 생성 후 파라미터 출력
	s03_orderForm, s04_order.jsp - 고객의 정보와 선택한 상품의 정보를 출력
	s05_registerForm, s06_register.jsp - 회원가입 후 회원정보 출력
	s07_requestInfo.jsp - 클라이언트 및 서버 정보
	s08_viewHeaderList.jsp - 헤더 목록 출력
	s09_responseA, s10_responseB.jsp - 리다이렉트
	s11_autoFlushTrue, s12_autoFlushFalse.jsp - page buffer 크기 및 autoFlush 값 수정, 기본값은 buffer="8kb"에 autoFlush="true"
	s13_bufferInfo.jsp - 버퍼 정보, 바이트 단위
	s14_scopeA, s15_scopeB.jsp - JSP 4개 기본 객체와 영역, page/request/session영역
	s16_setApplication.jsp - application 속성 지정, setAttribute(속성명, 속성값)
	s17_getApplication.jsp - application 기본 객체 속성 보기, getAttribute()
	s18_orderForm, s19_order.jsp - 주문서를 받아 주문 음식과 가격을 출력
 ch04 include
	include 디렉티브
 ch05 errorPage
	error폴더 > jsp파일들 - 에러 설명 페이지
 ch06 actionTag
	<jsp:forward> <jsp:include> <jsp:param> - 페이지 모듈화
 ch07 cookie
	쿠키 생성 - Cookie객체 생성 및 addCookie로 클라이언트에 전송
	쿠키 값 변경 - 쿠키명이 같은 쿠키 객체를 생성한 후 클라이언트로 전송
	쿠키 삭제 - 쿠키명이 같은 쿠키 객체를 생성한 후 setMaxAge(0)으로 쿠키 정보 제거 후 클라이언트로 전송
	쿠키 목록 - getCookies()를 통해 클라이언트로부터 전송된 쿠키 정보를 반환
 ch08 session
	세션 정보 - 세션ID, 세션 생성시간, 최근 접근 시간, 세션 유지 시간
	s02, s03, s04, s05.jsp - 로그인 폼 생성 후 로그인, 로그인 여부 확인 및 로그아웃하기
 ch09 fileUpload
	파일 업로드 - 반드시 post방식, enctype 필수, 다중 업로드도 가능
	MultipartRequest multi = new MultipartRequest(request, realFolder, maxSize, encType, new DefaultFileRenamePolicy());
	- realFolder는 절대경로, maxSize는 파일 최대 업로드 사이즈, encType은 인코딩 타입
 ch10 jdbc
	dbinfo.jspf - DB 설정 정보
	selectTest.jsp - 게시판 목록
	detailTest.jsp - 글 상세 정보
	insertTest.jsp - 글 등록
	updateTest.jsp - 글 수정
	deleteTest.jsp - 글 삭제
 ch11, ch12 ajax
	AJAX(Asynchronous Javascript And XML)
	- 자바스크립트와 XML을 이용한 비동기 통신
	- .ajax(서버의 어플리케이션 URL, 옵션)
	- 서버에 정보를 요청해서 text정보를 전송받음
	JSON(Javascript Object Notation)
	- 자바스크립트 객체 표기법
	- .getJSON(요청 URL, 데이터를 서버로부터 성공적으로 받았을 때 호출되는 함수)
	- getJSON이 데이터를 받아 함수 인자에 넣음

====================
#Servlet & JSP
[1] 웹어플리케이션
1) 구성
 클라이언트, 웹서버, 어플리케이션 서버, DB
 요청(request)과 응답(response)

2) 요청 처리 방식 (여러 요청이 동일한 프로그램을 호출할 때 처리하는 방식)
 CGI방식: 요청량만큼 프로세서를 생성해서 처리
 Servlet/JSP 사용 시의 방식: 어플리케이션 서버 내의 컨테이너가 각 요청에 따라 스레드를 생성하여 하나의 프로그램을 동작시킴, 대량의 트래픽 발생에도 부하가 덜 발생

3) Servlet, JSP
 Servlet: 자바 기반 웹 개발 표준 언어, 실행 코드 방식
 JSP: 자바 기반 스크립트 언어, 주로 웹어플리케이션에서 결과 화면 생성 시 사용

4) 웹컨테이너: 웹어플리케이션을 실행할 수 있는 컨테이너

5) 개발 환경
 서버: 톰캣
 톰캣 디렉토리
 - bin: 스크립트 파일
 - conf: 설정 파일
 - lib: 라이브러리(jar) 파일
 - log: 로그 파일
 - temp: 임시 파일
 - webapps: 웹 어플리케이션
 - work: 작업 파일

6) 다이나믹 웹 프로젝트
 src: java, servlet 소스파일, classes: class파일
 WebContent: html파일, WEB-INF: xml파일, lib: jar파일

==========
[2] Servlet
1) Servlet
 자바 기반의 웹 프로그래밍 기술, 자바 언어의 모든 기능 사용 가능, 쓰레드 기반의 빠른 처리 속도 지원
 프로그램 내에서 화면 코딩을 제어하기 때문에 유지 보수에 문제가 있고 이를 해결한 것이 JSP, JSP는 내부적으로 Servlet기술에 기반함

2) HTTP프로토톨과 메소드
 HTTP프로토콜: 비연결(클라이언트 요청에 응답 후 바로 연결을 끊음)과 비상태(서버 상태 상관없이 요청을 함)의 특징
 HTTP메소드: Get방식(쿼리문자열 전송, 256byte 제한), Post(body에 데이터를 넣어 전송, 사이즈 제한 없음)

3) 패키지와 주요 객체
 javax.servlet: 프로토콜에 독립적인 Servlet을 만들기 위한 클래스
 javax.servlet.http: HTTP프로토콜의 고유한 기능(Get, Post 등)을 제공
 HttpServletRequest: HTTP요청에 대한 기능 제공
 HttpServletResponse: HTTP응답에 대한 기능 제공
 ServletConfig: Servlet당 객체 하나, 서블릿 배포시 설정된 정보를 Servlet에 넘겨줌
 ServletContext: 웹 어플리케이션당 객체 하나, 웹 어플리케이션의 정보나 서버 정보를 파악할 때 사용

4) 서블릿 매핑
 배포 서술자, DD(Deployment Descriptor): 서블릿 컨테이너에 서블릿 배포 시 사용하는 xml문서, URL과 서블릿 매핑 정보
 URL 매핑
 - <servlet>: 서블릿 내부명-클래스명 매핑 정보
 - <servlet-mapping>: 서블릿 내부명-URL명 매핑 정보

==========
[3] JSP
1) 디렉티브
 <%@ 디렉티브이름 속성="값" %>
 - page: JSP페이지에 대한 정보
 - taglib: 사용할 태그 라이브러리
 - include: 다른 문서를 포함할 때
 JSP 구동 원리: 요청 -> 컨테이너 -> JSP -> Servlet변환 -> class생성 -> Servlet실행 -> HTML -> 응답
 출력 버퍼와 응답
 - 출력 버퍼는 JSP가 생성한 응답 결과를 임시로 저장함
 - 장점: 데이터 전송 성능 향상, 버퍼가 다 차기 전 헤더 변경 가능, JSP 실행 도중 버퍼를 비우고 새 내용 전송 가능
 include 디렉티브
 - <%@ include file="파일이름" %>
 - 코드 차원에서 포함, 모든 JSP 페이지에서 사용되는 변수를 지정, 모든 페이지에서 중복되는 문장

2) 스크립트
 동적으로 출력 결과를 생성하기 위해 사용
 요소
 - 선언부(Declatation): 변수와 메서드 선언 <%! %>
 - 스크립트릿(Scriptlet): 자바 코드를 실행<% %>
 - 표현식(Expression): 연산, 변수의 값이나 메서드의 결과값 출력 <%= %>

3) 기본객체
 JSP가 제공하는 기본 객체
 - request: 클라이언트의 요청 정보 저장, 웹 브라우저가 웹 서버에 전송한 요청 관련 정보 제공
 - response: 응답 정보 저장, 웹 브라우저에 전송하는 응답 정보 설정
 - pageContext: JSP페이지에 대한 정보 저장, 다른 기본 객체에 대한 접근 메서드 제공
 - session: HTTP 세션 정보 저장
 - application: 웹 어플리케이션에 대한 정보 저장
 - out: JSP페이지가 생성하는 결과를 출력할 때 사용되는 출력 스트림, 모든 내용이 out 기본 객체를 통해 전송됨
 - config: JSP페이지에 대한 설정 정보 저장
 - page: JSP페이지를 구현한 자바 클래스 인스턴스
 - exception: 예외 객체, 에러 페이지에서 사용

4) 기본 객체와 영역
 pageContext: page는 하나의 JSP페이지를 처리할 때 사용되는 영역
 request: request는 하나의 HTTP요청을 처리할 때 사용되는 영역
 session: 하나의 웹 브라우저와 관련된 영역
 application: 하나의 웹 어플리케이션과 관련된 영역

5) 액션 태그
 <jsp:include> 다른 JSP페이지의 실행 결과를 현재 위치에 삽입, 요청 시간에 처리, 화면 에이아웃의 일부분을 모듈화 할 때 주로 사용
 <jsp:forward> 하나의 JSP페이지에서 다른 JSP페이지로 요청 처리를 전달할 때 사용, 같은 웹 서버나 애플리케이션 디렉토리에 속하는 웹 자원만 호출 가능, request 내장 객체를 통해 데이터 전달

6) 에러 처리
 page디렉티브를 이용한 에러 처리
 에러 페이지 지정: <%@ page errorPage="jsp이름" %>
 에러 페이지 작성: <%@ page isErrorPage="true" %>

7) 쿠키
 쿠키는 웹 브라우저가 보관하고 있는 데이터, 웹 서버에 요청을 보낼 때 함께 전송
 구성 요소: 이름, 값, 유효시간, 도메인, 경로

8) 세션
 웹 컨테이너에서 클라이언트의 정보를 보관할 때 사용, 오직 서버에서만 생성하며 클라이언트마다 세션이 생성됨

==========
[4] 자바빈 & <jsp:useBean>
 자바빈: 웹 프로그래밍에서 데이터의 표현을 목적으로 사용
 <jsp:useBean>태그: JSP에서 자바빈 객체를 생성할 때 사용, id, class, scope 명시

==========
[5] JSP와 DB연동
1) JDBC
 Java Database Connectivity, 자바에서 DB 프로그래밍을 하기 위해 사용되는 API

2) 커넥션 풀
 Connection Pool, 데이터베이스와 연결된 커넥션을 미리 만들어서 풀에 저장해 두고 있다가 필요할 때 커넥션을 풀에서 가져다 쓰고 다시 풀에 반환하는 기법

3) 커넥션 풀 장점
 풀 속에 미리 커넥션이 생성되어 있어서 커넥션 생성에 시간이 소비되지 않음
 커넥션 재사용으로 생성되는 커넥션 수가 많지 않음
 커넥션 생성과 제거 시간이 없기 때문에 어플리케이션 실행 속도가 빨라짐
 한 번에 생성될 수 있는 커넥션 수를 제어하기 때문에 동시 접속자 수가 많아서 웹 어플리케이션이 쉽게 다운되지 않음

4) 자카르타 DBCP API와 JNDI를 이용한 커넥션 풀 사용

==========
[5] 모델1 방식으로 DB 연동하기

==========
[6] 파일 업로드
 cos 라이브러리 사용

==========
[7] EL & JSTL
1) EL
 EL 특징
 - JSP 기본 객체가 제공하는 영역의 속성 사용
 - 집합 객체에 대한 접근 방법 제공
 - 수치 연산, 관계 연산, 논리 연산자 제공
 - 자바 클래스 메서드 호출 기능 제공
 - 표현 언어만의 기본 객체 제공
 EL 표기법: ${ expr }
 EL 연산자: 수치 연산자, 비교 연산자, 논리 연산자, empty 연산자
 EL 기본 객체: pageContext, pageScope, requestScope, sessionScope, applicationScope, param, paramValues, header, headerValues, cookie, initParam

2) JSTL
 core 라이브러리 <%@ taglib prefix="c" uri=http://java.sun.com/jsp/jstl/core %>
 - prefix: 접두사
 - uri: core 라이브러리가 있는 위치

==========
[8] MVC
1) 모델 1 구조
2) 모델 2 구조(MVC)
3) MVC 패턴
 - 모델: 비즈니스 영역의 상태 정보를 처리
 - 뷰: 비즈니스 영역에 대한 프레젠테이션 뷰(사용자가 보게 될 결과 화면)를 담당
 - 컨트롤러: 사용자의 입력 및 흐름 제어를 담당
특징: 로직을 처리하는 모델과 결과 화면을 보여주는 뷰가 분리되어 흐름 제어나 사용자의 처리 요청은 컨트롤러에 집중함


====================
#Spring
[1] 스프링 기초
01. 스프링 프레임워크
 스프링은 중량급의 J2EE 컨테이너를 대신할 경량 컨테이너로 고안됨.
*경량 컨테이너
 - Plain Old Java Object
 - 컨테이너와 프레임워크 등에 의존하지 않는 일반 오브젝트의 생애 주기 관리나 오브젝트 간의 의존 관계를 해결하는 아키텍처를 구현한 컨테이너
*소프트웨어 프레임워크
 - 정의: 소프트웨어 시스템에 대한 라이브러리 또는 클래스의 재사용 세트
 - 특징: 개발 용이성, 운영 용이성, 시스템 복잡도의 감소, 개발코드의 최소화, 이식성, 변경 용이성, 품질보증, 설계와 코드의 재사용성

02. 스프링 프레임워크 특징
 1) 경량 (Lightweight): 스프링을 이용해서 만든 애플리케이션의 배포는 빠르고 쉬움
 2) IoC (Inversion of Control) 컨테이너: 자바 객체의 생성/소멸과 같은 라이프 사이클을 관리, 스프링 컨테이너로부터 필요한 객체를 가져와 사용
 3) DI 지원: 의존관계 주입
 4) AOP 지원
 5) POJO (Pain Old Java) 지원: POJO는 평범한 옛날 자바 객체를 의미
 6) 트랜잭션 처리를 위한 일관된 방법 제공
 7) 데이터베이스 처리를 위한 라이브러리 연동
 8) 엔터프라이즈 어플리케이션 개발에 필요한 다양한 API 뎐동
 9) Spring MVC: Model, View, Controller 사이의 의존 관계를 컨테이너에서 관리

03. 스프링 프레임워크 설치

04. DI(Dependency Injection)
 객체간 의존 관계를 형성할 때 의존하는 객체를 조립기가 삽입해주는 방식, 스프링은 설정 파일과 어노테이션을 이용해 의존 관계를 설정하는 기능 제공

05. AOP(Aspect Oriented Programming)
 관점 지향 프로그래밍, 공통의 관심사항을 적용해서 발생하는 의존 관계의 복잡성과 코드 중복을 해소해주는 프로그래밍 기법, 공통 기능을 별도로 모듈로 구현한 뒤 각 기능을 필요로 하는 곳에 적용

06. Maven
 메이븐은 소프트웨어를 개발할 때 반복되는 작업을 자동화하는 빌드 도구, 표준 프로젝트를 일관된 방식과 구조로 관리/배포/운영할 수 있음
 - 메이븐 특징: 정형화된 구조와 절차를 제공, 디펜던시 라이브러리 해결을 자동화, 라이브러리 관리 용이, 라이프 사이클, 다양한 플러그인 사용 가능
 - 디펜던시 관리: pom.xml 파일 안에 <dependencies>요소를 사용해서 표현, POM의 일부로 메이븐에서 사용함, 프로젝트 디펜던시는 저장소에 저장됨
 - 디펜던시 필수 항목: groupId, artifactId, version

==========
[2] 스프링 DI와 객체 관리
01. DI
 의존 관계 주입, 오브젝트 사이의 의존 관계를 만드는 것, 어떤 오브젝트가 의존(이용)할 오브젝트를 주입/인젝션(프로퍼티에 설정)하는 것

02. 스프링 컨테이너
 스프링 객체를 관리하는 컨테이너를 제공, 컨테이너에 객체를 담아 두고 필요할 때 컨테이너로부터 객체를 가져와 사용할 수 있음

03. 빈(Bean) 생성과 의존 관계 설정
 1) 빈 객체 설정 및 컨테이너를 통한 빈 객체 사용
 2) 의존 관계 설정
 - 생성자 방식
 - 프로퍼티 설정 방식
 - XML 네임스페이스를 이용한 프로퍼티 설정
 - 룩업 메서드 인젝션 방식
 - 임의 빈 객체 전달
 - 콜렉션 타입 프로퍼티 설정
 3) 의존 관계 자동 설정
 byName, byType, constructor

04. 빈 범위 설정
 스프링 빈의 범위를 설정
 singleton: 스프링 컨테이너에 한 개의 빈 객체만 존재
 prototype: 빈을 사용할 때마다 객체를 생성
 request: HTTP 요청마다 빈 객체를 생성, WebApplicationContext에서만 적용 가능
 session: HTTP 세션마다 빈 객체를 생성, WebApplicationContext에서만 적용 가능
 global-session: 글로벌 HTTP세션에 대해 빈 객체를 생성

05. 어노테이션 기반 설정
 1) @Required어노테이션을 이용한 필수 프로퍼티 검사: 필수 프로퍼티를 명시할 때 사용
 2) @Autowired어노테이션을 이용한 자동 설정: 의존 관계를 자동으로 설정할 때 사용

06. 어노테이션을 이용한 자동 스캔
 <context:component-scan>태그를 추가하면 스피릉은 지정한 패키지에서 @Component어노테이션 또는 하위 어노테이션이 적용된 클래스를 검색하여 빈으로 등록함
 1) 자동 검색된 빈의 이름과 범위: 특정 이름을 명시하고 싶으면 어노테이션 속성에 빈의 이름을 입력
 2) @Component의 확장: @Controller, @Service, @Repository
 3) 빈의 범위 설정: 기본은 singleton, 범위 변경 시 @Scope 이용
 4) @Scope 주요 Value 속성

07. 자바 코드 기반 설정
 Spring JavaConfig 프로젝트: XML이 아닌 자바 코드를 이용해서 컨테이너를 설정할 수 있는 기능을 제공하는 프로젝트

==========
[3] 스프링 AOP
 AOP는 어플리케이션 전반에 걸쳐 적용되는 공통기능을 핵심 기능과 분리해서 모듈로 구현한 뒤 핵심 기능이 수행될 때 필요로 하는 곳에 공통기능이 적용되게 하는 기법, 공통의 관심사항을 적용해서 발생하는 의존 관계의 복잡성과 코드 중복을 해소하는 프로그래밍 기법

01. 소개
 Aspect Oriented Programming, AOP는 문제를 바라보는 관점을 기준으로 프로그래밍 하는 기법
 공통 관심 사항을 구현한 코드를 핵심 로직을 구현한 코드 안에 삽입하는 것
 1) 용어: Advice, Joinpoint, Pointcut, Weaving, Aspect
 2) 3가지 Weaving 방식
 - 컴파일 시점에 코드에 공통 기능을 추가하는 방법
 - 클래스 로딩 시점에 바이트 코드에 공통 기능을 추가하는 방법
 - 런타입에 프록시 객체를 생성해서 공통 기능을 추가하는 방법 -> 스프링이 제공하는 AOP 방식
 3) 스프링에서의 AOP
 - XML 스키마 기반의 POJO 클래스를 이용한 AOP 구현
 - @Aspect어노테이션 기반의 AOP 구현
 4) 구현 가능한 Advice 종류

02. XML 스키마를 이용한 AOP 설정

==========
[4] 스프링 MVC
 스프링 MVC의 주요 구성 요소
 - DispatcherServlet: 클라이언트의 요청을 전달받음, 컨트롤러에게 클라이언트의 요청을 전달하고 컨트롤러가 리턴한 결과값을 View에 전달하여 알맞은 응답을 생성하도록 함
 - HandlerMapping: 클라이언트의 요청 URL을 어떤 컨트롤러가 처리할지 결정
 - Controller: 클라이언트의 요청을 처리한 후 그 결과를 DispatcherServlet에 알려줌
 - ModelAndView: 컨트롤러가 처리한 결과 정보 및 뷰 선택에 필요한 정보를 담음
 - ViewResolver: 컨트롤러의 처리 결과를 생성할 뷰를 결정
 - View: 컨트롤러의 처리 결과 화면을 생성, JSP나 Velocity 템플릿 파일 등을 뷰로 사용

01. 스프링 MVC 설정
 maven - pom.xml에 jar 파일 설정
 web.xml - DispatcherServlet 매핑
 root-context.xml - 데이터베이스 연동 설정
 servlet-context.xml - bean 설정

1) DispatcherServlet 설정 및 스프링 컨텍스트 설정 - web.xml 파일에 추가
2) 컨트롤러 구현 및 설정 추가 - @Controller, @RequestMapping
3) servlet-context.xml 설정 - bean 설정 및 viewResolver 설정
4) 뷰 코드 구현
5) 빈 클래스 설정 시 사용할 어노테이션 - @Repository, @Service, @Controller

02. 주요 폼 관련 커스텀 태그
1) 주요 폼 태그
2) CSS와 관련된 공통 속성

03. Validator 인터페이스를 이용한 폼 값 검증

04. 메시지 처리
1) MessageSource를 이용한 메시지 국제화 처리
2) 에러 코드 호출 시 메서드 사용

05. 파일 업로드 처리
1) MultipartResolver 설정

==========
[5] JDBC
01. 커넥션 풀을 이용한 DataSource 설정
 BasicDataSource클래스의 주요 프로퍼티

02. JdbcTemplate클래스를 JDBC 프로그래밍
1) JdbcTemplate 빈 설정
2) Dao클래스에서의 JdbcTemplate 객체 사용

03. NamedParameterJdbcTemplate클래스를 이용한 JDBC 프로그래밍
1) NamedParameterJdbcTemplate 빈 설정
2) Dao클래스에서의 NamedParameterJdbcTemplate 객체 사용

==========
[6] 로깅 처리
로깅은 시스템의 개발이나 운용 시 발생하는 애플리케이션의 내부 정보를 파일이나 콘솔에 출력하여 시스템의 상황을 쉽게 파악할 수 있도록 함

01. 로깅 서비스 관련 중요 컴포넌트 - Appender, Lagout, Logger
02. 로그 레벨 - ERROR, WARN, INFO, DEBUG, TRACE

==========
[7] 트랜잭션
01. 트랜잭션에서 지켜야 할 ACID 특성 - 트랜잭션의 원자성, 데이터의 일관성, 트랜잭션의 독립성, 데이터의 영속성

02. JDBC 기반 트랜잭션 관리자 설정
1) 빈 설정
2) TransactionTemplate을 이용한 트랜잭션 처리

03. 선언적 트랜잭션 처리
1) 빈 설정
2) <tx:method>태그의 속성
트랜잭션 전파
트랜잭션 격리수준
트랜잭션 제한시간
읽기전용 트랜잭션
트랜잭션 롤백 예외
트랜잭션 커밋 예외

04. 어노테이션 기반 트랜잭션 설정
1) 메서드에 직접 명시
2) @Transactional 어노테이션의 주요 속성
3) <tx:annotation0driven>태그의 속성

==========
[8] MyBatis
iBatis로부터 파생됨, Apache에서 탈퇴하여 Google로 넘어가며 이름이 변경됨