11. 기본 API 클래스

[11.1] 자바 API 도큐먼트
* API(Application Programming Interface)는 라이브러리라고 부르기도 한다.
* API란 프로그램 개발에 자주 사용되는 클래스 및 인터페이스의 모음이다.
 - <JDK설치경로>\jre\lib\rt.jar 압축파일에 저장되어 있음

* API 도큐먼트는 쉽게 API를 찾아 이용할 수 있도록 문서화한 것을 말한다.
 - HTML페이지로 작성되어 있음

[11.2] java.lang과 java.util패키지
* java.lang패키지는 자바 프로그램의 기본적인 클래스를 담고 있는 패키지이며 import없이 사용할 수 있다.
 - Object, System, Class, String, StringBuffer, StringBuilder, Math, Wrapper(Byte/Short/Character/Integer/Float/Double/Boolean/Long)

*java.util패키지는 자바 프로그램 개발에 조미료 역할을 하는 클래스를 담고 있으며 컬렉션 클래스들이 대부분을 차지한다.
 - Arrays, Calendar, Date, Objects, StringTokenizer, Random

[11.3] Object클래스
* 클래스 선언 시 extends키워드로 다른 클래스를 상속하지 않으면 암시적으로 java.lang.Object클래스를 상속하게 된다.
 - 자바의 모든 클래스는 Object클래스의 자식이거나 자손임
 - Object는 자바의 최상위 부모 클래스에 해당함
* Object클래스는 필드가 없고 메소드들로 구성되어 있다.
 - 이 메소드들은 모든 클래스가 Object를 상속하기 때문에 모든 클래스에서 사용 가능함

* 객체 비교 equals()
* 객체 해시코드 hashCode()
 - 객체 해시코드란 객체를 식별할 하나의 정수값
 - Object의 hashCode()메소드는 객체의 메모리 번지를 이용해서 해시코드를 만들어 리턴하며 객체마다 다른 값을 가짐
 - 논리적 동등 비교 시 hashCode()를 오버라이딩할 필요성이 있음
* 객체 문자 정보 toString()
 - 객체의 문자 정보를 리턴, "클래스명@16진수해시코드"
 - Object의 toString()메소드 리턴값은 의미 없는 정보이므로 Object 하위클래스는 메소드를 재정의하여 의미 있는 정보를 리턴함

* 객체 복제는 원본 객체의 필드와 동일한 값을 가지는 새로운 객체를 생성하는 것이다.
 - 원본 객체를 안전하게 보호하기 위해 객체를 복제함, 신뢰하지 않는 영역에 복제된 객체를 넘김
* 얕은 복제(thin clone)
 - 단순히 필드값을 복사해서 객체를 복제하는 것
 - 필드가 기본 타입일 경우 값 복사, 필드가 참조 타입일 경우 객체의 번지가 복사됨
* 객체 복제 clone()
 - Object의 clone()메소드는 자신과 동일한 필드값을 가진 얕은 복제된 객체를 리턴
 - 원본 객체는 반드시 java.lang.Cloneable인터페이스를 구현(implements)하고 있어야 함

* 참조하지 않는 배열이나 객체는 Garbage Collector가 힙 영역에서 자동적으로 소멸시킨다.
* GC는 객체를 소멸하기 직전에 객체의 소멸자인 finalize()를 실행시킨다.
* 소멸자는 Object의 finalize()메소드이며 기본적으로 실행 내용이 없다.
 - 객체가 소멸되기 전에 사용했던 자원을 닫거나 중요한 데이터를 저장하고 싶다면 finalize()를 재정의할 수 있음
* System.gc()는 GC 실행 요청 명령이다.
 - GC는 객체를 순서대로 소멸시키지 않고 무작위로 소멸시킴
 - GC는 객체를 전부 소멸시키지 않고 메모리의 상태를 보고 일부만 소멸시킴
 - GC는 메모리가 부족하거나 CPU가 한가할 때 JVM에 의해 자동 실행됨 -> 따라서 finalize()메소드가 호출되는 시점은 명확하지 않음

[11.4] Objects클래스
* java.util.Objects클래스
 - 객체 비교, 해시코드 생성, null 여부, 객체 문자열 리턴 등의 연산을 수행하는 정적 메소드들로 구성된 Object의 유틸리티 클래스

* Objects.compare(T a, T b, Comparator<T>c)메소드는 두 객체를 비교자로 비교해서 int값을 리턴한다.
 - T는 비교할 객체 타입
 - 앞이 작으면 음수, 같으면 0, 크면 양수 리턴

* Objects.equals(Object a, Object b)는 두 객체의 동등을 비교한다.
 - a와 b가 모두 null이면 true리턴, a와 b가 null이 아닌 경우 a.equals(b)의 결과를 리턴
* Objects.deepEquals(Object a, Object b)도 두 객체의 동등을 비교한다.
 - a와 b가 서로 다른 배열일 경우, 항목 값이 모두 같으면 true리턴
 - Arrays.deepEquals(Object[] a, Object[] b)와 동일

* Objects.hash(Object... values)메소드는 매개값으로 주어진 값들을 이용해서 해시 코드를 생성한다.
 - 주어진 매개값들로 배열을 생성하고 Arrays.hashCode(Object[])를 호출해 해시코드를 얻고 이 값을 리턴
 - 클래스가 hashCode()를 재정의할 때 리턴값을 생성하기 위해 사용하면 좋음
 - 클래스가 여러 필드를 가질 때 이 필드로부터 해시코드를 생성하면 동일한 필드값을 가지는 객체는 동일한 해시코드를 가질 수 있음
 - Objects.hashCode(Object o)는 매개값으로 주어진 객체의 해시코드를 리턴하기 때문에 o.hashCode()의 리턴값과 동일함, 단 매개값이 null이면 0을 리턴

* Objects.isNull(Object obj)는 매개값이 null일 경우 true를 리턴한다.
* Objects.nonNul(Object obj)는 매개값이 not null일 경우 true를 리턴한다.
* Objects.requireNonNull은 세 가지로 오버로딩 되어있음
 - requireNonNull(T obj), requireNonNull(T obj, String message), requireNonNull(T obj, Supplier<String> msgSupplier)

* Objects.toString()은 객체의 문자 정보를 리턴하며 두 가지로 오버로딩 되어있음
 - toString(Object o), toString(Object o, String nullDefault)

[11.5] System클래스
* 자바 프로그램은 OS상에서 바로 실행되는 것이 아니라 JVM 위에서 실행된다.
 - OS의 모든 기능을 자바 코드로 직접 접근하는 건 어려움
* java.lang의 System클래스를 통해 OS의 일부 기능을 이용할 수 있다.
 - 프로그램 종료, 키보드로부터 입력, 모니터로 출력, 메모리 정리, 현재 시간 읽기, 시스템 프로퍼티 읽기, 환경 변수 읽기 등
 - System클래스의 모든 필드와 메소드는 정적 필드와 정적 메소드로 구성됨

* exit()메소드는 현재 실행하고 있는 프로세스를 강제 종료시키는 역할을 한다.
 - exit()메소드에 지정하는 int매개값은 종료 상태값이라고 함
 - 일반적으로 정상 종료면 0으로 지정 -> System.exit(0);

* 자바는 개발자가 메모리를 직접 코드로 관리하지 않고 JVM이 알아서 자동으로 관리한다.
 - 메모리가 부족할 때와 CPU가 한가할 때 GC를 실행시켜 사용하지 않는 객체를 자동 제거함
* GC는 개발자가 직접 코드로 실행시킬 수 없고 JVM에게 빠른 실행을 요청할 수는 있다.
 - System.gc();

* currentTimeMillis()와 nanoTime()은 컴퓨터의 시계로부터 현재 시간을 읽어서 밀리세컨드(1/1000초) 단위와 나노세컨드(1/10^9) 단위의 long값을 리턴한다.
 - long time = System.currentTimeMillis(); 또는 long time = System.nanoTime();
 - 리턴값은 주로 프로그램의 실행 소요 시간 측정에 사용됨

* 시스템 프로퍼티(System Property)는 JVM이 시작할 때 자동 설정되는 시스템의 속성값이다.
 - 키(key)와 값(value)으로 구성됨
 - System.getProperty()메소드는 시스템 프로퍼티의 키 이름을 매개값으로 받고 해당 키에 대한 값을 문자열로 리턴
 - System.getProperties()메소드는 모든(키,값) 쌍을 저장하고 있는 Properties객체를 리턴, 이 객체의 keySet()메소드를 호출하면 키만으로 구성된 Set객체를 얻을 수 있음

* 환경 변수(Environment Variable)는 프로그램상의 변수가 아니라 운영체제에서 이름(name)과 값(value)으로 관리되는 문자열 정보이다.
* 환경 변수는 운영체제가 설치될 때 기본적인 내용이 설정되고 사용자가 직접 설정하거나 응용 프로그램이 설치될 때 자동적으로 추가 설정되기도 한다.

[11.6] Class클래스
* 자바는 클래스와 인터페이스의 메타 데이터를 java.lang.Class클래스로 관리한다.
 - 메타 데이터란 클래스 이름, 생성자 정보, 필드 정보, 메소드 정보

* 프로그램에서 Class객체를 얻기 위해서는 Object클래스의 getClass()메소드를 사용한다.
 - 모든 클래스에서 getClass()메소드를 호출 가능
 - Class clazz = obj.getClass();
 - getClass()메소드는 해당 클래스로 객체를 생성했을 때만 사용 가능

* 객체를 생성하기 전에 직접 Class객체를 얻을 수 있다.
* Class는 생성자를 감추고 있어서 new연산자로 객체를 만들 수 없고 정적 메소드인 forName()을 이용해야 한다.
 - forName()메소드는 클래스 전체이름(패키지포함)을 매개값으로 받고 Class객체를 리턴함
 - Class.forName()은 매개값으로 주어진 클래스를 찾지 못하면 ClassNotFoundException예외를 발생시킴 -> 예외 처리 필요
 - try {Class clazz = Class.forName(String className);} catch(ClassNotFoundException e) {}

* Class객체를 이용해 클래스의 생성자, 필드, 메소드 정보를 알아낼 수 있는 것을 리플렉션(Reflection)이라고 한다.
* Class객체는 리플렉션을 위해 getDeclaredConstructors(), getDeclaredFields(), getDeclaredMethods()를 제공한다.
 - 각 메소드는 Constructor배열, Field배열, Method배열을 리턴 (모두 java.lang.reflect패키지에 소속됨)

* Class객체를 이용하면 new연산자를 사용하지 않아도 동적으로 객체를 생성할 수 있다.
 - 코드 작성 시 클래스 이름을 결정할 수 없고, 런타입 시에 클래스 이름이 결정되는 경우에 유용하게 사용됨
* Class.forName()메소드로 Class객체를 얻은 다음 newInstance()메소드를 호출하면 Object타입의 객체를 얻을 수 있음
 - Object obj = clazz.newInstance();
 - newInstance()메소드는 기본 생성자를 호출해서 객체를 생성함
 - 발생 가능한 예외 2가지: InstantiationException, IllegalAccessException -> 예외 처리 코드 필요

[11.7] String클래스
* 자바의 문자열은 java.lang패키지의 String클래스의 인스턴스로 관리된다.
 * 소스상에서 문자열 리터럴은 String객체로 자동 생성되지만 String클래스의 다양한 생성자를 이용해서 직접 String객체를 생성할 수도 있다.
 - 약 13개의 생성자를 제공
 - 어떤 생성자를 이용해서 생성할지는 제공되는 매개값의 타입에 달려있음
* 파일의 내용을 읽거나 네트워크를 통해 받은 데이터는 보통 byte[]배열이므로 이것을 문자열로 변환하기 위해 사용된다.

* String은 문자열의 추출, 비교, 찾기, 분리, 변환 등과 같은 다양한 메소드를 가지고 있다.
* String클래스의 메소드는 몯느 프로그램에서 자주 사용되며 메소드 이름이 곧 메소드 기능을 뜻한다.

* 문자 추출 charAt()
 - 매개값으로 주어진 인덱스의 문자를 리턴

* 문자열 비교 equals()
 - 자바는 문자열 리터럴이 동일하다면 동일한 String객체를 참조함
 - 두 String객체의 문자열만을 비교하고 싶다면 ==연산자 대신에 equals()메소드를 사용함
 - Object의 번지 비교 메소드인 equals()를 String클래스가 오버라이딩해서 문자열을 비교하도록 변경함

* 바이트 배열로 변환 getBytes()
 - 문자열을 바이트 배열로 변환하는 경우 ex) 네트워크로 문자열을 전송할 때, 문자열을 암호화할 때
 - getBytes()메소드는 시스템의 기본 문자셋으로 인코딩된 바이트 배열을 리턴
 - getBytes(Charset)메소드는 특정 문자셋으로 인코딩된 바이트 배열을 리턴
 - getBytes(Charset)메소드는 잘못된 문자셋을 매개값으로 줄 경우 예외가 발생 -> 예외 처리 필요
* 어떤 문자셋으로 인코딩하느냐에 따라 바이트 배열의 크기가 달라진다.
* 바이트 배열을 다시 문자열로 변환(디코딩)할 때는 어떤 문자셋으로 인코딩된 바이트 배열이냐에 따라 디코딩 방법이 다르다.
 - 시스템 기본 문자셋과 다른 문자셋으로 인코딩한 바이트 배열일 경우 String생성자를 이용해서 디코딩해야 함

* 문자열 찾기 indexOf()
 - 매개값으로 주어진 문자열이 시작되는 인덱스를 리턴
 - 문자열이 포함되어 있지 않으면 -1을 리턴
 - 주로 if문의 조건식에서 특정 문자열이 포함되어 있는지 여부에 따라 실행 코드를 달리할 때 자주 사용

* 문자열 길이 length()
 - 문자열의 길이(문자의 수)를 리턴

* 문자열 대치 replace()
 - 첫 번재 매개값인 문자열을 찾아 두 번째 매개값인 문자열로 대치한 새로운 문자열을 생성학 리턴
* String객체의 문자열은 변경이 불가한 특성을 가진다. 따라서 replace()메소드가 리턴하는 문자열은 완전히 새로운 문자열이다.

* 문자열 잘라내기 substring()
 - 주어진 인덱스에서 문자열을 추출
 - 매개값이 2개이면 시작과 끝 인덱스 사이의 문자열을 추출, 매개값이 1개이면 주어진 인덱스부터 끝까지 문자열을 추출

* 알파벳 소/대문자 변경 toLowerCase(), toUpperCase()
 - 각각 문자열을 모두 소/대문자로 바꾼 새로운 문자열을 생성한 후 리턴
 - equalsIgnoreCase()메소드는 대소문자 구분을 안함, str1.equalsIgnoreCase(str2);

* 문자열 앞뒤 공백 잘라내기 trim()
 - 문자열의 앞뒤 공백을 제거한 새로운 문자열을 생성하고 리턴
 - 중간의 공백은 제거하지 않음

* 문자열 변환 valueOf()
 - 기본 타입의 값을 문자열로 변환하는 기능
 - String클래스에는 매개 변수의 타입별로 valueOf()메소드가 오버로딩되어 있음: boolean, char, int, long, double, float

[11.8] StringTokenizer클래스
* 문자열이 특정 구분자(delimiter)로 연결되어 있을 경우 구분자를 기준으로 부분 문자열을 분리할 수 있다.
 - String의 split()메소드 또는 java.util패키지의 StringTokenizer클래스 이용
 - 차이점: split()는 정규 표현식으로 구분, StringTokenizer는 문자로 구분

* split()메소드
 - 정규 표현식을 구분자로 해서 문자열을 분리한 후 배열에 저장하고 리턴함
 - String[] result = str.split("정규표현식");

* StringTokenizer클래스
 - 문자열이 한 종류의 구분자로 연결되어 있을 경우 StringTokenizer클래스를 사용하여 문자열(토큰)을 분리할 수 있음
 - StringTokenizer객체를 생성할 때 (전체 문자열, 구분자) 2개의 매개값을 줌
 - 매개값에서 구분자 생략 시 공백(Space)이 기본 구분자가 됨
* StringTokenizer객체가 생성되면 다음 메소드들을 이용해서 부분 문자열을 분리해 낼 수 있다.
 - int countTokens(): 남아 있는 토큰 수
 - boolean hasMoreTokens(): 토큰이 남아있는지 여부
 - String nextToken(): 토큰을 하나씩 꺼냄

[11.9] StringBuffer, StringBuilder클래스

