14. 람다식

[14.1] 람다식이란?
* 함수적 프로그래밍을 위해 자바8부터 람다식을 지원하면서 기존의 코드 패턴이 많이 달려졌다.
* 람다식은 익명 함수를 생성하기 위한 식으로 함수 지향 언어에 가깝다.
* 람다식을 사용하면 코드가 간결해지고 원하는 결과를 쉽게 집계할 수 있다는 장점이 있다.
* 람다식의 형태는 매개 변수를 가진 코드 블록이지만 런타임 시에는 익명 구현 객체를 생성한다.
 - 람다식 -> 매개 변수를 가진 코드 블록 -> 익명 구현 객체
* 람다식은 (매개변수) -> {실행코드}의 형태로 작성된다.
 - 함수 정의 형태를 띠지만 런타임 시에는 인터페이스의 익명 구현 객체로 생성됨
 - 어떤 인터페이스를 구현할지는 대입되는 인터페이스에 따라 달려있음

[14.2] 람다식 기본 문법
* 함수적 스타일의 람다식 작성 방법: (타입 매개변수, ...) -> {실행문; ...}
 - 매개변수 타입은 런타임 시 대입되는 값에 따라 자동으로 인식 가능, 따라서 매개 변수의 타입을 일반적으로 언급하지 않음
 - 매개 변수와 실행문이 단 하나라면 괄호()와 중괄호{} 생략 가능 ex. a->{실행문}
 - 매개 변수가 없다면 빈 괄호를 꼭 적어야 함 ex. ()->{실행문;}
 - 중괄호의 실행문에 return문만 있을 경우 return문을 사용하지 않음 ex. (x,y)->x+y

[14.3] 타겟 타입과 함수적 인터페이스
* 람다식의 형태는 매개 변수를 가진 코드 블록이고 메소드를 선언하는 것처럼 보인다.
* 하지만 단순히 메소드를 선언하는 것이 아니라 이 메소드를 가지고 있는 객체를 생성해 낸다.
* 람다식은 인터페이스 변수에 대입되고 결국 인터페이스의 익명 구현 객체를 생성한다는 뜻이다.
 - 인터페이스 변수 = 람다식;
* 인터페이스는 직접 객체화가 불가능하므로 구현 클래스가 필요하고, 람다식은 익명 구현 클래스를 생성하고 객체화한다.
* 람다식은 대입될 인터페이스 종류에 따라 작성 방법이 달라진다.
 - 람다식이 대입될 인터페이스를 람다식의 타겟 타입이라고 함

* 람다식은 하나의 메소드를 정의하기 때문에 하나의 추상 메소드가 선언된 인터페이스만이 람다식의 타겟 타입이 될 수 있다.
* 람다식의 타겟 타입이 될 수 있는 인터페이스를 함수적 인터페이스라고 한다.
* 함수적 인터페이스 작성 시 @FunctionalInterface 어노테이션을 붙이면 두 개 이상의 추상 메소드가 선언되지 않도록 컴파일러가 체킹해준다.
 - 어노테이션은 선택사항, 하나의 추상 메소드만 있다면 모두 함수적 인터페이스

* 람다식은 타겟 타입인 함수적 인터페이스가 가지고 있는 추상 메소드의 선언 형태에 따라 작성 방법이 달라진다.
- 매개 변수X, 리턴값X: Interface fi = () -> {...}; fi.method();
- 매개 변수O, 리턴값X: Interface fi = (x)또는x -> {...}; fi.method(2);
- 매개 변수O, 리턴값O: Interface fi = (x,y) -> {...; return 값;}; int result = fi.method(1,2);

[14.4] 클래스 멤버와 로컬 변수 사용
* 람다식의 실행 블록에는 클래스의 멤버(필드, 메소드) 및 로컬 변수를 사용할 수 있다.
 - 클래스의 멤버는 자유롭게 사용, 로컬 변수는 제약이 있음

* 람다식 실행 블록에서는 클래스의 멤버인 필드와 메소드를 제약 없이 사용 가능하다.
* 람다식에서 this는 내부적으로 생성되는 익명 객체의 참조가 아니라 람다식을 실행한 객체의 참조이다.
 - 바깥 객체의 참조를 얻기 위해서는 클래스명.this를 사용

* 람다식은 메소드 내부에서 주로 작성되기 때문에 로컬 익명 구현 객체를 생성시킨다고 본다.
* 람다식에서 메소드의 매개 변수나 로컬 변수를 사용하면 변수는 final특성을 가져야 한다.
 - [9.5]참고, 람다식에서 변수를 읽는 것은 허용되지만 내부나 외부에서 변경하는 것은 불가능

[14.5] 표준 API의 함수적 인터페이스
* 자바에서 제공하는 표준 API에서 한 개의 추상 메소드를 가지는 인터페이스들은 모두 람다식을 이용해 익명 구현 객체로 표현이 가능하다.
 - ex. Runnable인터페이스에는 run()메소드만이 존재, 람다식을 이용해 Runnable인스턴스 생성 가능
* 자바8부터 함수적 인터페이스는 java.util.function 표준 API 패키지로 제공한다.
* 패키지에서 제공하는 함수적 인터페이스의 목적은 메소드 또는 생성자의 매개 타입으로 사용되어 람다식을 대입할 수 있도록 하기 위해서이다.
* java.util.function패키지의 함수적 인터페이스: Consumer, Supplier, Function, Operator, Predicate
 - 구분 기준은 인터페이스에 선언된 추상 메소드의 매개값과 리턴값의 유무
=====
Consumer	매개값O, 리턴값X
Supplier	매개값X, 리턴값O
Function	매개값O, 리턴값O	매개값을 리턴값으로 매핑(타입 변환)
Operator	매개값O, 리턴값O	매개값을 연산하고 결과를 리턴
Predicate	매개값O, boolean리턴	매개값을 조사해서 true/false 리턴
=====

* Consumer 함수적 인터페이스
 - 리턴값이 없는 accept()메소드, 단지 매개값을 사용만 함

* Supplier 함수적 인터페이스
 - 매개 변수가 없고 리턴값이 있는 getXXX()메소드, 실행 후 호출한 곳으로 데이터를 리턴(공급)하는 역할을 함

* Function 함수적 인터페이스
 - 매개값과 리턴값이 있는 applyXXX()메소드, 매개값을 리턴값으로 매핑(타입 변환)하는 역할을 함

* Operator 함수적 인터페이스
 - 매개값과 리턴값이 있는 applyXXX()메소드, 매개값을 이용해서 연산을 수행한 후 동일한 타입으로 리턴값을 제공하는 역할을 함

* Predicate 함수적 인터페이스
 - 매개 변수와 boolean리턴값이 있는 testXXX()메소드, 매개값을 조사해서 true 또는 false를 리턴하는 역할을 함

* andThen(), compose() 디폴트 메소드
