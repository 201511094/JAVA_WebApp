10. 예외 처리

[10.1] 예외와 예외 클래스
* 자바에서 에러란 응용프로그램 실행 오류가 발생하는 것이다.
 - 에러란 JVM 실행에 문제가 생겼다는 것
* 자바에서 예외는 사용자의 잘못된 조작 또는 개발자의 잘못된 코딩으로 인해 발생하는 프로그램 오류이다.
 - 자바의 오류에는 에러와 예외가 있음
 - 예외가 발생하면 에러와 마찬가지로 프로그램이 곧바로 종료됨 -> 예외 처리를 통해 정상 실행 상태를 유지할 수 있음

* 예외의 종류: 일반 예외, 실행 예외 -> 두 가지 모두 예외 처리가 필요함
* 일반 예외(Exception)
 - 컴파일러 체크 예외, 자바 소스 컴파일 과정에서 예외 처리 코드가 필요한지 검사, 예외 처리 코드가 없으면 컴파일 오류
* 실행 예외(Runtime Exception)
 - 컴파일하는 과정에서 예외 처리 코드를 검사하지 않는 예외, 예외 처리 코드을 생략하더라도 컴파일이 되는 예외

* 자바에서는 예외를 클래스로 관리한다.
* JVM은 프로그램 실행 도중 예외가 발생하면 해당 예외 클래스로 객체를 생성하며 예외 처리 코드에서 객체를 이용할 수 있도록 해준다.
* 모든 예외 클래스들은 java.lang.Exception클래스를 상속받는다.
 - 일반 예외는 Exception을 상속받지만 RuntimeException을 상속받지 않는 클래스들
 - 실행 예외는 RuntimeException을 상속받는 클래스들 (RuntimeException도 Exception을 상속받음)
* JVM은 RuntimeException을 상속했는지 여부를 보고 실행 예외를 판단한다.

[10.2] 실행 예외
* 실행 예외는 자바 컴파일러가 체크하지 않기 때문에 개발자의 경험에 의해 예외 처리 코드를 삽입해야 한다.
* 자바 프로그램에서 자주 발생되는 실행 예외는 언제 발생하는지와 어떤 오류 메시지가 출력되는지 알아두어야 한다.

* NullPointerException
 - 객체 참조가 없는 상태, 즉 null값을 갖는 참조 변수로 객체 접근 연산자인 도트(.)를 사용했을 때 발생
 - 객체가 없는 상태에서 객체를 사용하려고 해서 발생한 예외
* ArrayIndexOutOfBoundsException
 - 배열에서 인덱스 범위를 초과하여 사용할 경우 발생한 예외
* NumberFormatException
 - 문자열로 되어 있는 데이터를 숫자로 변경할 때 숫자로 변환할 수 없는 문자가 포함되어 있을 경우 발생한 예외
* ClassCastException
 - 타입 변환은 상위 클래스와 하위 클래스 간에 발생하고 구현 클래스와 인터페이스 간에도 발생
 - 위와 같은 관계가 아니지만 억지로 타입 변환을 시도할 경우 발생한 예외

[10.3] 예외 처리 코드
* 예외 처리 코드란 프로그램에서 예외가 발생했을 경우 프로그램의 갑작스러운 종료를 막고 정상 실행을 유지할 수 있도록 처리하는 코드이다.
* 자바 컴파일러는 소스 파일을 컴파일할 때 일반 예외가 발생할 가능성이 있는 코드를 발견하면 컴파일 오류를 발생시킨다.
 - 개발자로 하여금 강제적으로 예외 처리 코드를 작성하도록 요구함
* 실행 예외는 컴파일러가 체크해주지 않기 때문에 예외 처리 코드를 개발자의 경험을 바탕으로 작성해야 한다.

* 예외 처리 코드는 try-catch-finally블록을 이용한다.
 - try-catch-finally블록은 생성자 내부와 메소드 내부에 작성되어 일반 예외와 실행 예외가 발생할 경우 예외 처리를 할 수 있게 해줌
 - try블록에는 예외 발생 코드가 위치, 예외가 발생하면 catch블록으로 이동하여 예외 처리 코드를 실행 후 finally블록의 코드를 실행
 - finally블록은 예외 발생 여부와 상관없이 항상 실행됨

[10.4] 예외 종류에 따른 처리 코드
* try블록 내부는 다양한 종류의 예외가 발생할 수 있다.
* 발생되는 예외별로 예외 처리 코드를 다르게 하려면 다중 catch블록을 작성하면 된다.
* catch블록의 예외 클래스 타입은 try블록에서 발생된 예외의 종류이며, try블록에서 해당 타입의 예외가 발생되면 catch블록을 실행하도록 되어 있다.
 - catch블록이 여러 개이더라도 단 하나의 catch블록만 실행됨 (하나의 예외가 발생하면 즉시 실행을 멈추고 해당 catch블록으로 이동하기 때문)

* 다중 catch블록을 작성할 때 상위 예외 클래스가 하위 예외 클래스보다 아래쪽에 위치해야 한다.
 - 상위 예외 클래스의 catch블록이 위에 있으면 하위 예외 클래스의 catch블록이 실행되지 않음
 - 왜냐하면 하위 예외는 상위 예외를 상속했기 때문에 상위 예외 타입도 됨

* 자바7부터 하나의 catch블록에서 여러 개의 예외를 처리할 수 있도록 멀티catch기능이 추가되었다.
* 멀티catch블록은 catch 괄호( )안에 동일하게 처리하고 싶은 예외를 "|"로 연결하면 된다.

[10.5] 자동 리소스 닫기


[10.6] 예외 떠넘기기


[10.7] 사용자 정의 예외와 예외 발생


[10.8] 예외 정보 얻기


[10.n] 확인문제
